def smart_piggy_bank(csv_file: str = "money.csv", json_file: str = None):
    print("=" * 70)
    print("üí∞ –£–ú–ù–ê–Ø –ö–û–ü–ò–õ–ö–ê ‚Äî –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üí°")
    print("=" * 70)

    # === 1. –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö ===
    transactions = []
    if csv_file:
        transactions += import_financial_data(csv_file)
    if json_file:
        transactions += import_financial_data(json_file)

    if not transactions:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    # === 2. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è ===
    categorized = categorize_all_transactions(transactions)

    # === 3. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ===
    stats = calculate_basic_stats(categorized)
    category_stats = calculate_by_category(categorized)
    timeline = analyze_by_time(categorized)

    # === 4. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ ===
    analysis = analyze_historical_spending(categorized)
    budget = create_budget_template(analysis, stats["total_income"])
    comparison = compare_budget_vs_actual(budget, categorized)

    # === 5. –û—Ç—á–µ—Ç ===
    print("\n=== –§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–ï–¢ ===")
    print(f"üí∞ –î–æ—Ö–æ–¥—ã: {stats['total_income']:.2f} —Ä—É–±.")
    print(f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {abs(stats['total_expense']):.2f} —Ä—É–±.")
    print(f"‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: {stats['balance']:.2f} —Ä—É–±.")

    print("\nüìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for cat, data in category_stats.items():
        print(f"  {cat}: {abs(data['sum']):.2f} —Ä—É–±. ({data['percent']:.1f}%)")

    print("\nüìÖ –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º:")
    for month, data in timeline.items():
        print(f"  {month}: –î–æ—Ö–æ–¥ {data['income']:.2f} | –†–∞—Å—Ö–æ–¥ {abs(data['expenses']):.2f}")
        if data["top_categories"]:
            top = ", ".join([f"{c} ({n})" for c, n in data["top_categories"]])
            print(f"   üî∏ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {top}")

    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–Æ–î–ñ–ï–¢–£:")
    print("–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º:")
    for cat, val in analysis["top_categories"]:
        print(f"  üî∏ {cat}: {val:.2f} —Ä—É–±. –≤ —Å—Ä–µ–¥–Ω–µ–º")

    print("\nüìã –°–†–ê–í–ù–ï–ù–ò–ï –° –ë–Æ–î–ñ–ï–¢–û–ú:")
    for cat, info in comparison.items():
        print(f"  {cat}: –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {info['actual']:.2f} / –õ–∏–º–∏—Ç {info['limit']:.2f} ‚Üí {info['status']}")

    print("\n‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n")
