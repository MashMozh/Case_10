import statistics
import csv
import json
import os.path
from collections import defaultdict, Counter
import datetime
import matplotlib.pyplot as plt

# ==========================
# –ö–ê–¢–ï–ì–û–†–ò–ò –ò –ü–†–ò–û–†–ò–¢–ï–¢–´
# ==========================

categories = {
    "–ø—Ä–æ–¥—É–∫—Ç—ã": ["–ø—Ä–æ–¥—É–∫—Ç—ã", "–º–∞–≥–∞–∑–∏–Ω", "–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π", "–ø—è—Ç—ë—Ä–æ—á–∫–∞", "–Ω–∏–∫–∞", "–∫–∞—Å—Å–∏—Ä"],
    "–æ–±–µ–¥ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã": ["—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–∫–∞—Ñ–µ", "–æ–±–µ–¥", "—É–∂–∏–Ω", "–∑–∞–≤—Ç—Ä–∞–∫"],
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å", "–º–µ—Ç—Ä–æ", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–±–∏–ª–µ—Ç"],
    "—É—Å–ª—É–≥–∏": ["–º–æ–±–∏–ª—å–Ω—ã–π", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—É—Å–ª—É–≥–∞", "—Å–µ—Ä–≤–∏—Å", "—Ä–µ–º–æ–Ω—Ç"],
    "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "—Ç–µ–∞—Ç—Ä", "–∫–æ–Ω—Ü–µ—Ä—Ç", "–∏–≥—Ä—ã", "–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä"],
    "–æ–¥–µ–∂–¥–∞": ["–æ–¥–µ–∂–¥–∞", "–æ–±—É–≤—å", "–º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã", "–≥–∞—Ä–¥–µ—Ä–æ–±"],
    "–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ": ["–∞–ø—Ç–µ–∫–∞", "–ª–µ–∫–∞—Ä—Å—Ç–≤–æ", "–º–µ–¥–∏—Ü–∏–Ω", "–≤—Ä–∞—á"],
    "—Å–ø–æ—Ä—Ç": ["—Å–ø–æ—Ä—Ç", "—Ç—Ä–µ–Ω–∞–∂—ë—Ä–∫–∞", "—Ñ–∏—Ç–Ω–µ—Å", "—Å–ø–æ—Ä—Ç–∑–∞–ª"],
    "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": ["–∫—É—Ä—Å", "—É—á–µ–±–∞", "—à–∫–æ–ª–∞", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"],
    "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏": ["–∫–æ–º–º—É–Ω–∞–ª–∫–∞", "–≤–æ–¥–∞", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–≥–∞–∑"],
    "–¥–µ–ø–æ–∑–∏—Ç/–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": ["–∫–ª–∏–µ–Ω—Ç–æ–≤", "–¥–µ–ø–æ–∑–∏—Ç", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"],
    "–∑–∞—Ä–ø–ª–∞—Ç–∞ –∏ –¥–æ—Ö–æ–¥—ã": ["–∑–∞—Ä–ø–ª–∞—Ç–∞", "–¥–æ—Ö–æ–¥", "–ø–µ—Ä–µ–≤–æ–¥"],
    "–ø–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞": ["–∫—Ä–µ–¥–∏—Ç", "–∏–ø–æ—Ç–µ–∫–∞", "–ø–æ–≥–∞—à–µ–Ω–∏–µ"],
    "–ø–æ–¥–∞—Ä–∫–∏": ["–ø–æ–¥–∞—Ä–æ–∫", "–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ"],
    "–Ω–∞–ª–æ–≥–∏": ["–Ω–∞–ª–æ–≥", "—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π"]
}

categories_priority = list(categories.keys())


# ==========================
# –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–•
# ==========================

def read_csv_file(filename: str) -> list:
    data = []
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                amount = float(row.get('amount', 0))
                transaction = {
                    'date': row.get('date', '').strip(),
                    'amount': amount,
                    'description': row.get('description', '').strip(),
                    'type': "–¥–æ—Ö–æ–¥" if amount >= 0 else "—Ä–∞—Å—Ö–æ–¥"
                }
                data.append(transaction)
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return data


def read_json_file(filename: str) -> list:
    data = []
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            json_data = json.load(file)
            for item in json_data.get('transactions', []):
                amount = float(item.get('amount', 0))
                data.append({
                    'date': item.get('date', '').strip(),
                    'amount': amount,
                    'description': item.get('description', '').strip(),
                    'type': "–¥–æ—Ö–æ–¥" if amount >= 0 else "—Ä–∞—Å—Ö–æ–¥"
                })
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except json.JSONDecodeError:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON –≤ {filename}.")
    return data


def import_financial_data(filename: str) -> list:
    if not os.path.exists(filename):
        return []
    ext = os.path.splitext(filename)[1].lower()
    if ext == ".csv":
        return read_csv_file(filename)
    elif ext == ".json":
        return read_json_file(filename)
    return []


# ==========================
# –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø
# ==========================

def categorize_transaction_with_multiple(description: str, categories: dict, priorities: list) -> str:
    desc = description.lower()
    for cat in priorities:
        if any(kw in desc for kw in categories.get(cat, [])):
            return cat
    return "–¥—Ä—É–≥–æ–µ"


def categorize_all_transactions(transactions: list) -> list:
    for t in transactions:
        desc = t.get("description", "")
        t["category"] = categorize_transaction_with_multiple(desc, categories, categories_priority)
    return transactions


# ==========================
# –ê–ù–ê–õ–ò–¢–ò–ö–ê
# ==========================

def calculate_basic_stats(transactions: list) -> dict:
    total_income = sum(t["amount"] for t in transactions if t["amount"] > 0)
    total_expense = sum(t["amount"] for t in transactions if t["amount"] < 0)
    return {
        "total_income": total_income,
        "total_expense": total_expense,
        "balance": total_income + total_expense,
        "transaction_count": len(transactions)
    }


def calculate_by_category(transactions: list) -> dict:
    totals = defaultdict(lambda: {"sum": 0, "count": 0})
    total_expense = sum(t["amount"] for t in transactions if t["amount"] < 0)
    for t in transactions:
        cat = t.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        totals[cat]["sum"] += t["amount"]
        totals[cat]["count"] += 1
    for cat, val in totals.items():
        val["percent"] = (-val["sum"] / -total_expense * 100) if total_expense else 0
    return totals


def analyze_by_time(transactions: list) -> dict:
    monthly = defaultdict(lambda: {"income": 0, "expenses": 0, "categories": []})
    for t in transactions:
        try:
            d = datetime.datetime.strptime(t["date"], "%Y-%m-%d")
        except Exception:
            continue
        key = d.strftime("%Y-%m")
        if t["amount"] >= 0:
            monthly[key]["income"] += t["amount"]
        else:
            monthly[key]["expenses"] += t["amount"]
            monthly[key]["categories"].append(t.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"))
    for m, data in monthly.items():
        data["top_categories"] = Counter(data["categories"]).most_common(3)
    return monthly


def analyze_historical_spending(transactions: list) -> dict:
    monthly_spending = defaultdict(lambda: defaultdict(float))
    for t in transactions:
        if t["amount"] < 0:
            d = datetime.datetime.strptime(t["date"], "%Y-%m-%d")
            month = d.strftime("%Y-%m")
            cat = t.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            monthly_spending[cat][month] += abs(t["amount"])
    avg_spending = {cat: round(statistics.mean(vals.values()), 2)
                    for cat, vals in monthly_spending.items() if vals}
    top_cats = sorted(avg_spending.items(), key=lambda x: x[1], reverse=True)[:3]
    return {"average_spending": avg_spending, "top_categories": top_cats}


# ==========================
# –ë–Æ–î–ñ–ï–¢ –ò –°–†–ê–í–ù–ï–ù–ò–ï
# ==========================

def create_budget_template(analysis: dict, total_income: float = None) -> dict:
    avg_spending = analysis.get("average_spending", {})
    total_expenses = sum(avg_spending.values())
    savings = round((total_income * 0.15 if total_income else total_expenses * 0.1), 2)
    budget = {cat: {"limit": round(val * 1.05, 2), "recommended": val}
              for cat, val in avg_spending.items()}
    budget["–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è"] = {"limit": savings, "recommended": savings}
    return budget


def compare_budget_vs_actual(budget: dict, transactions: list) -> dict:
    actual = defaultdict(float)
    for t in transactions:
        if t["amount"] < 0:
            actual[t["category"]] += abs(t["amount"])
    report = {}
    for cat, data in budget.items():
        limit = data["limit"]
        spent = actual.get(cat, 0)
        diff = limit - spent
        report[cat] = {
            "limit": limit,
            "actual": spent,
            "difference": diff,
            "status": "‚úÖ –í –ø—Ä–µ–¥–µ–ª–∞—Ö –±—é–¥–∂–µ—Ç–∞" if diff >= 0 else "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –±—é–¥–∂–µ—Ç"
        }
    return report


# ==========================
# –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø
# ==========================

def visualize_financial_data(transactions: list):
    """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫: —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º"""
    if not transactions:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")
        return

    # --- –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
    expenses = defaultdict(float)
    for t in transactions:
        if t["amount"] < 0:
            expenses[t["category"]] += abs(t["amount"])
    if expenses:
        plt.figure(figsize=(8, 5))
        plt.bar(expenses.keys(), expenses.values())
        plt.title("–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        plt.xlabel("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        plt.ylabel("–°—É–º–º–∞, —Ä—É–±.")
        plt.xticks(rotation=45, ha="right")
        plt.tight_layout()
        plt.show()


# ==========================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ==========================

def smart_piggy_bank(csv_file="money.csv", json_file="transactions.json"):
    print("=" * 70)
    print("üí∞ –£–ú–ù–ê–Ø –ö–û–ü–ò–õ–ö–ê ‚Äî –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üí°")
    print("=" * 70)

    transactions = []
    if csv_file:
        transactions += import_financial_data(csv_file)
    if json_file:
        transactions += import_financial_data(json_file)

    if not transactions:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    transactions = categorize_all_transactions(transactions)

    stats = calculate_basic_stats(transactions)
    categories_stats = calculate_by_category(transactions)
    timeline = analyze_by_time(transactions)
    analysis = analyze_historical_spending(transactions)
    budget = create_budget_template(analysis, stats["total_income"])
    comparison = compare_budget_vs_actual(budget, transactions)

    # --- –û–¢–ß–Å–¢ ---
    print("\n=== –§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–Å–¢ ===")
    print(f"üí∞ –î–æ—Ö–æ–¥—ã: {stats['total_income']:.2f}")
    print(f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {abs(stats['total_expense']):.2f}")
    print(f"‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: {stats['balance']:.2f}")

    print("\nüìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for cat, data in categories_stats.items():
        print(f"  {cat}: {abs(data['sum']):.2f} —Ä—É–±. ({data['percent']:.1f}%)")

    print("\nüìÖ –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º:")
    for month, data in timeline.items():
        top = ", ".join([f"{c} ({n})" for c, n in data["top_categories"]])
        print(f"  {month}: –¥–æ—Ö–æ–¥ {data['income']:.2f} | —Ä–∞—Å—Ö–æ–¥ {abs(data['expenses']):.2f} ‚Üí —Ç–æ–ø: {top}")

    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    for cat, val in analysis["top_categories"]:
        print(f"  üî∏ {cat}: {val:.2f} —Ä—É–±. –≤ —Å—Ä–µ–¥–Ω–µ–º")

    print("\nüìã –°–†–ê–í–ù–ï–ù–ò–ï –° –ë–Æ–î–ñ–ï–¢–û–ú:")
    for cat, info in comparison.items():
        print(f"  {cat}: –ø–æ—Ç—Ä–∞—á–µ–Ω–æ {info['actual']:.2f} / –ª–∏–º–∏—Ç {info['limit']:.2f} ‚Üí {info['status']}")

    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!\n")

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    visualize_financial_data(transactions)


if __name__ == "__main__":
    smart_piggy_bank()
