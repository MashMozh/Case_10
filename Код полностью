import statistics
import csv
import json
import os.path
from collections import defaultdict, Counter
import datetime
import matplotlib.pyplot as plt

# ==========================
# КАТЕГОРИИ И ПРИОРИТЕТЫ
# ==========================

categories = {
    "продукты": ["продукты", "магазин", "продуктовый", "пятёрочка", "ника", "кассир"],
    "обед и рестораны": ["ресторан", "кафе", "обед", "ужин", "завтрак"],
    "транспорт": ["такси", "автобус", "метро", "транспорт", "билет"],
    "услуги": ["мобильный", "интернет", "услуга", "сервис", "ремонт"],
    "развлечения": ["кино", "театр", "концерт", "игры", "кинотеатр"],
    "одежда": ["одежда", "обувь", "магазин одежды", "гардероб"],
    "здравоохранение": ["аптека", "лекарство", "медицин", "врач"],
    "спорт": ["спорт", "тренажёрка", "фитнес", "спортзал"],
    "образование": ["курс", "учеба", "школа", "университет"],
    "коммунальные услуги": ["коммуналка", "вода", "электричество", "газ"],
    "депозит/инвестиции": ["клиентов", "депозит", "инвестиции"],
    "зарплата и доходы": ["зарплата", "доход", "перевод"],
    "погашение кредита": ["кредит", "ипотека", "погашение"],
    "подарки": ["подарок", "поздравление"],
    "налоги": ["налог", "фискальный"]
}

categories_priority = list(categories.keys())


# ==========================
# ИМПОРТ ДАННЫХ
# ==========================

def read_csv_file(filename: str) -> list:
    data = []
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                amount = float(row.get('amount', 0))
                transaction = {
                    'date': row.get('date', '').strip(),
                    'amount': amount,
                    'description': row.get('description', '').strip(),
                    'type': "доход" if amount >= 0 else "расход"
                }
                data.append(transaction)
    except FileNotFoundError:
        print(f"⚠️ Файл {filename} не найден.")
    return data


def read_json_file(filename: str) -> list:
    data = []
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            json_data = json.load(file)
            for item in json_data.get('transactions', []):
                amount = float(item.get('amount', 0))
                data.append({
                    'date': item.get('date', '').strip(),
                    'amount': amount,
                    'description': item.get('description', '').strip(),
                    'type': "доход" if amount >= 0 else "расход"
                })
    except FileNotFoundError:
        print(f"⚠️ Файл {filename} не найден.")
    except json.JSONDecodeError:
        print(f"⚠️ Ошибка формата JSON в {filename}.")
    return data


def import_financial_data(filename: str) -> list:
    if not os.path.exists(filename):
        return []
    ext = os.path.splitext(filename)[1].lower()
    if ext == ".csv":
        return read_csv_file(filename)
    elif ext == ".json":
        return read_json_file(filename)
    return []


# ==========================
# КАТЕГОРИЗАЦИЯ
# ==========================

def categorize_transaction_with_multiple(description: str, categories: dict, priorities: list) -> str:
    desc = description.lower()
    for cat in priorities:
        if any(kw in desc for kw in categories.get(cat, [])):
            return cat
    return "другое"


def categorize_all_transactions(transactions: list) -> list:
    for t in transactions:
        desc = t.get("description", "")
        t["category"] = categorize_transaction_with_multiple(desc, categories, categories_priority)
    return transactions


# ==========================
# АНАЛИТИКА
# ==========================

def calculate_basic_stats(transactions: list) -> dict:
    total_income = sum(t["amount"] for t in transactions if t["amount"] > 0)
    total_expense = sum(t["amount"] for t in transactions if t["amount"] < 0)
    return {
        "total_income": total_income,
        "total_expense": total_expense,
        "balance": total_income + total_expense,
        "transaction_count": len(transactions)
    }


def calculate_by_category(transactions: list) -> dict:
    totals = defaultdict(lambda: {"sum": 0, "count": 0})
    total_expense = sum(t["amount"] for t in transactions if t["amount"] < 0)
    for t in transactions:
        cat = t.get("category", "Без категории")
        totals[cat]["sum"] += t["amount"]
        totals[cat]["count"] += 1
    for cat, val in totals.items():
        val["percent"] = (-val["sum"] / -total_expense * 100) if total_expense else 0
    return totals


def analyze_by_time(transactions: list) -> dict:
    monthly = defaultdict(lambda: {"income": 0, "expenses": 0, "categories": []})
    for t in transactions:
        try:
            d = datetime.datetime.strptime(t["date"], "%Y-%m-%d")
        except Exception:
            continue
        key = d.strftime("%Y-%m")
        if t["amount"] >= 0:
            monthly[key]["income"] += t["amount"]
        else:
            monthly[key]["expenses"] += t["amount"]
            monthly[key]["categories"].append(t.get("category", "Без категории"))
    for m, data in monthly.items():
        data["top_categories"] = Counter(data["categories"]).most_common(3)
    return monthly


def analyze_historical_spending(transactions: list) -> dict:
    monthly_spending = defaultdict(lambda: defaultdict(float))
    for t in transactions:
        if t["amount"] < 0:
            d = datetime.datetime.strptime(t["date"], "%Y-%m-%d")
            month = d.strftime("%Y-%m")
            cat = t.get("category", "Без категории")
            monthly_spending[cat][month] += abs(t["amount"])
    avg_spending = {cat: round(statistics.mean(vals.values()), 2)
                    for cat, vals in monthly_spending.items() if vals}
    top_cats = sorted(avg_spending.items(), key=lambda x: x[1], reverse=True)[:3]
    return {"average_spending": avg_spending, "top_categories": top_cats}


# ==========================
# БЮДЖЕТ И СРАВНЕНИЕ
# ==========================

def create_budget_template(analysis: dict, total_income: float = None) -> dict:
    avg_spending = analysis.get("average_spending", {})
    total_expenses = sum(avg_spending.values())
    savings = round((total_income * 0.15 if total_income else total_expenses * 0.1), 2)
    budget = {cat: {"limit": round(val * 1.05, 2), "recommended": val}
              for cat, val in avg_spending.items()}
    budget["накопления"] = {"limit": savings, "recommended": savings}
    return budget


def compare_budget_vs_actual(budget: dict, transactions: list) -> dict:
    actual = defaultdict(float)
    for t in transactions:
        if t["amount"] < 0:
            actual[t["category"]] += abs(t["amount"])
    report = {}
    for cat, data in budget.items():
        limit = data["limit"]
        spent = actual.get(cat, 0)
        diff = limit - spent
        report[cat] = {
            "limit": limit,
            "actual": spent,
            "difference": diff,
            "status": "✅ В пределах бюджета" if diff >= 0 else "⚠️ Превышен бюджет"
        }
    return report


# ==========================
# ВИЗУАЛИЗАЦИЯ
# ==========================

def visualize_financial_data(transactions: list):
    """Строит 2 графика: расходы по категориям и доходы/расходы по месяцам"""
    if not transactions:
        print("Нет данных для визуализации.")
        return

    # --- Расходы по категориям ---
    expenses = defaultdict(float)
    for t in transactions:
        if t["amount"] < 0:
            expenses[t["category"]] += abs(t["amount"])
    if expenses:
        plt.figure(figsize=(8, 5))
        plt.bar(expenses.keys(), expenses.values())
        plt.title("Расходы по категориям")
        plt.xlabel("Категория")
        plt.ylabel("Сумма, руб.")
        plt.xticks(rotation=45, ha="right")
        plt.tight_layout()
        plt.show()

    # --- Доходы и расходы по месяцам ---
    monthly = defaultdict(lambda: {"income": 0, "expense": 0})
    for t in transactions:
        d = datetime.datetime.strptime(t["date"], "%Y-%m-%d")
        m = d.strftime("%Y-%m")
        if t["amount"] >= 0:
            monthly[m]["income"] += t["amount"]
        else:
            monthly[m]["expense"] += abs(t["amount"])
    months = sorted(monthly.keys())
    incomes = [monthly[m]["income"] for m in months]
    expenses_vals = [monthly[m]["expense"] for m in months]

    plt.figure(figsize=(8, 5))
    plt.plot(months, incomes, marker='o', label="Доходы")
    plt.plot(months, expenses_vals, marker='o', label="Расходы")
    plt.title("Доходы и расходы по месяцам")
    plt.xlabel("Месяц")
    plt.ylabel("Сумма, руб.")
    plt.legend()
    plt.grid(True, linestyle='--', alpha=0.6)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()


# ==========================
# ГЛАВНАЯ ФУНКЦИЯ
# ==========================

def smart_piggy_bank(csv_file="money.csv", json_file="transactions.json"):
    print("=" * 70)
    print("💰 УМНАЯ КОПИЛКА — личный финансовый помощник 💡")
    print("=" * 70)

    transactions = []
    if csv_file:
        transactions += import_financial_data(csv_file)
    if json_file:
        transactions += import_financial_data(json_file)

    if not transactions:
        print("❌ Нет данных для анализа.")
        return

    transactions = categorize_all_transactions(transactions)

    stats = calculate_basic_stats(transactions)
    categories_stats = calculate_by_category(transactions)
    timeline = analyze_by_time(transactions)
    analysis = analyze_historical_spending(transactions)
    budget = create_budget_template(analysis, stats["total_income"])
    comparison = compare_budget_vs_actual(budget, transactions)

    # --- ОТЧЁТ ---
    print("\n=== ФИНАНСОВЫЙ ОТЧЁТ ===")
    print(f"💰 Доходы: {stats['total_income']:.2f}")
    print(f"💸 Расходы: {abs(stats['total_expense']):.2f}")
    print(f"⚖️ Баланс: {stats['balance']:.2f}")

    print("\n📊 Расходы по категориям:")
    for cat, data in categories_stats.items():
        print(f"  {cat}: {abs(data['sum']):.2f} руб. ({data['percent']:.1f}%)")

    print("\n📅 Анализ по месяцам:")
    for month, data in timeline.items():
        top = ", ".join([f"{c} ({n})" for c, n in data["top_categories"]])
        print(f"  {month}: доход {data['income']:.2f} | расход {abs(data['expenses']):.2f} → топ: {top}")

    print("\n🎯 РЕКОМЕНДАЦИИ:")
    for cat, val in analysis["top_categories"]:
        print(f"  🔸 {cat}: {val:.2f} руб. в среднем")

    print("\n📋 СРАВНЕНИЕ С БЮДЖЕТОМ:")
    for cat, info in comparison.items():
        print(f"  {cat}: потрачено {info['actual']:.2f} / лимит {info['limit']:.2f} → {info['status']}")

    print("\n✅ Анализ завершён успешно!\n")

    # Визуализация
    visualize_financial_data(transactions)


if __name__ == "__main__":
    smart_piggy_bank()





import statistics
import csv
import json
import os.path
from collections import defaultdict
import collections
import datetime


def read_csv_file(filename: str) -> list:
    """
    Reads financial data from a CSV file and converts it to a standard format.

    Args:
        filename (str):  The path to the CSV file

    Returns:
        list: A list of dictionaries with transactions in a unified format
    """

    data = []

    try:
        with open(filename, 'r', encoding='utf-8') as file:
            read_csv = csv.DictReader(file)

            for row in read_csv:
                amount = float(row.get('amount', 0))
                transact_type = "доход" if amount >= 0 else "расход"

                transaction = {
                    'date': row.get('date', '').strip(),
                    'amount': amount,
                    'description': row.get('description', '').strip(),
                    'type': transact_type
                }
                data.append(transaction)

            return data

    except FileNotFoundError:
        print("Error: The CSV file could not be found.")
        return []


def read_json_file(filename: str) -> list:
    """
    Reads financial data from a JSON file and converts it to a standard format.

    Args:
        filename (str):  The path to the JSON file

    Returns:
        list: A list of dictionaries with transactions in a unified format
    """

    try:
        with open(filename, 'r', encoding='utf-8') as file:
            read_json = json.load(file)

            transactions = read_json.get('transactions', [])
            single_format = []

            for operation in transactions:
                amount = float(operation.get('amount', 0))
                transact_type = "доход" if amount >= 0 else "расход"

                transaction = {
                    'date': operation.get('date', '').strip(),
                    'amount': amount,
                    'description': operation.get('description', '').strip(),
                    'type': transact_type
                }
                single_format.append(transaction)

            return single_format

    except FileNotFoundError:
        print("Error: The JSON file could not be found.")
        return []
    except json.JSONDecodeError:
        print(f"Error: Invalid JSON format in file")
        return []



def import_financial_data(filename: str):
    """
    Automatically detects the file format by extension and calls
    the appropriate function.

    Args:
        filename (str):  The path to the file (CSV or JSON)

    Returns:
        list: A list of dictionaries with transactions in a unified format
    """

    if not os.path.exists(filename):
        print(f"Error: File does not exist.")
        return []

    file_type = os.path.splitext(filename)[1].lower()

    if file_type == '.csv':
        result = read_csv_file(filename)
    elif file_type == '.json':
        result = read_json_file(filename)
    else:
        print(f"Error: Unsupported file format")
        return []
    return result


def categorize_transaction_with_multiple(description: str, categories: dict,
                                         categories_priority: list) -> str:

    description_low = description.lower()
    matched_categories = []

    for category in categories_priority:
        keywords = categories.get(category, [])
        if any(keyword in description_low for keyword in keywords):
            matched_categories.append(category)

    if matched_categories:
        return matched_categories[0]
    return "другое"


def categorize_all_transactions(transactions: list) -> list:

    for transaction in transactions:
        desc = transaction.get("description", "")
        category = categorize_transaction_with_multiple(desc, categories, categories_priority)
        transaction["category"] = category
    return transactions


#шаг 1 : Посчитать основные показатели
def calculate_basic_stats(transactions: list) -> dict:
    total_income = sum(t['amount'] for t in transactions
                       if t['amount'] > 0)
    total_expense = sum(t['amount'] for t in transactions
                        if t['amount'] < 0)
    balance = total_income + total_expense
    count_transactions = len(transactions)#испольховала sum() и len() для подсчетов
    return {
        'total_income': total_income,
        'total_expense': total_expense,
        'balance': balance,
        'transaction_count': count_transactions
    }

#Шаг 2: Разложить по категориям
def calculate_by_category(transactions: list) -> dict: # transactions — список словарей
    category_totals = {}#словарь для группировки (см технические подсказки)
    total_expenses = sum(t['amount'] for t in transactions
                         if t['amount'] < 0)

    for t in transactions:
        category = t.get('category', 'Без категории') #пытаемся извлечь название категории по ключу 'category', иначе
        if category not in category_totals:
            category_totals[category] = {'sum': 0, 'count': 0}
        category_totals[category]['sum'] += t['amount']
        category_totals[category]['count'] += 1

    # Вычисляем процент от общих расходов
    for cat, data in category_totals.items():
        data['percent'] = (-data['sum'] / -total_expenses * 100) if total_expenses != 0 else 0

    return category_totals


# Функция для анализа по времени (по месяцам)
def analyze_by_time(transactions: list) -> dict:
    monthly_stats = {}

    for t in transactions:
        date_obj = datetime.datetime.strptime(t['date'], '%Y-%m-%d')
        month_key = date_obj.strftime('%Y-%m')  # например, '2024-01'
        if month_key not in monthly_stats:
            monthly_stats[month_key] = {
                'income': 0,
                'expenses': 0,
                'categories': []
            }
        if t['amount'] > 0:
            monthly_stats[month_key]['income'] += t['amount']
        elif t['amount'] < 0:
            monthly_stats[month_key]['expenses'] += t['amount']
            monthly_stats[month_key]['categories'].append(t.get('category', 'Без категории'))

    # Анализ самых частых категорий за месяц
    for month, data in monthly_stats.items():
        category_counter = collections.Counter(data['categories'])
        most_common = category_counter.most_common(3)
        data['top_categories'] = most_common

    return monthly_stats


# Пример использования
def main():
    print("=" * 60)
    print("ФИНАНСОВЫЙ АНАЛИЗАТОР")
    print("=" * 60)

    print("ИМПОРТ ДАННЫХ ИЗ ФАЙЛОВ")
    print("-" * 40)

    data_csv = import_financial_data('money.csv')
    data_json = import_financial_data('transactions.json')

    if not data_csv and not data_json:
        print("Нет данных для анализа. Проверьте наличие файлов.")
        return

    all_transactions = data_csv + data_json

    transactions = categorize_all_transactions(all_transactions)

    # Расчет основных показателей
    print("Основные показатели:")
    print("-" * 40)
    basic_stats = calculate_basic_stats(transactions)
    print(f"💰 Доходы: {basic_stats['total_income']:.2f} руб.")#округление числа до 2 х знаков после запятой
    print(f"💸 Расходы: {abs(basic_stats['total_expense']):.2f} руб.")
    print(f"⚖️ Баланс: {basic_stats['balance']:.2f} руб.")

    # Расчет по категориям
    category_stats = calculate_by_category(transactions)
    print("\nРасходы по категориям:")
    for category, data in category_stats.items():
        print(f"{category}: {abs(data['sum']):.2f} руб. ({data['percent']:.1f}%)")

    # Анализ по времени
    timeline = analyze_by_time(transactions)
    print("\nАнализ по месяцам:")
    for month, data in timeline.items():
        print(f"\nМесяц: {month}")
        print(f" Доходы: {data['income']:.2f} руб.")
        print(f" Расходы: {abs(data['expenses']):.2f} руб.")
        print("Топ категорий расхода:")
        for cat, count in data['top_categories']:
            print(f"  {cat}: {count} транзакций")

categories = {
    "продукты": ["продукты", "магазин", "продуктовый", "пятёрочка", "ника", "касира"],
    "обед и рестораны": ["ресторан", "кафе", "обед", "бесплатно", "ужин", "завтрак"],
    "транспорт": ["такси", "автобус", "метро", "транспорт", "билет"],
    "услуги": ["мобильный", "интернет", "услуга", "сервис", "ремонт"],
    "развлечения": ["кино", "театр", "концерт", "игры", "кинотеатр"],
    "одежда": ["одежда", "обувь", "магазин одежды", "гардероб"],
    "здравоохранение": ["аптека", "лекарство", "медицин", "врач"],
    "спорт": ["спорт", "тренажёрка", "фитнес", "спортзал"],
    "образование": ["курс", "учеба", "школа", "университет"],
    "коммунальные услуги": ["Коммуналка", "вода", "электричество", "газ"],
    "депозит/инвестиции": ["клиентов", "депозит", "инвестиции"],
    "зарплата и доходы": ["зарплата", "доход", "перевод"],
    "погашение кредита": ["кредит", "ипотека", "погашение"],
    "подарки": ["подарок", "поздравление"],
    "налоги": ["налог", "фискальный"]
    }

categories_priority = [
    "зарплата и доходы",
    "погашение кредита",
    "продукты",
    "обед и рестораны",
    "транспорт",
    "услуги",
    "развлечения",
    "одежда",
    "здравоохранение",
    "спорт",
    "образование",
    "коммунальные услуги",
    "депозит/инвестиции",
    "подарки",
    "налоги"
    ]


def analyze_historical_spending(transactions: list) -> dict:
    """
    Анализирует исторические траты:
    - Средние траты по категориям в месяц
    - Определяет категории с наибольшими расходами
    """

    # Группируем по категориям и месяцам
    monthly_spending = defaultdict(lambda: defaultdict(float))

    for t in transactions:
        if t["amount"] < 0:  # только расходы
            date_obj = datetime.datetime.strptime(t["date"], "%Y-%m-%d")
            month = date_obj.strftime("%Y-%m")
            category = t.get("category", "Без категории")
            monthly_spending[category][month] += abs(t["amount"])

    # Средние траты по категориям
    avg_spending = {}
    for category, months in monthly_spending.items():
        values = list(months.values())
        avg_spending[category] = round(statistics.mean(values), 2) if values else 0

    # Определяем топ категорий по расходам
    top_categories = sorted(avg_spending.items(), key=lambda x: x[1], reverse=True)[:3]

    analysis = {
        "average_spending": avg_spending,
        "top_categories": top_categories
    }

    return analysis


def create_budget_template(analysis: dict, total_income: float = None) -> dict:
    """
    Создает шаблон бюджета на основе анализа.
    Устанавливает лимиты по категориям и выделяет накопления.
    """

    avg_spending = analysis.get("average_spending", {})
    top_cats = analysis.get("top_categories", [])

    if not avg_spending:
        return {}

    # Базовый бюджет = средние траты + резерв на накопления
    budget = {}
    total_expenses = sum(avg_spending.values())

    # Если известен доход — оставим 10-20% на накопления
    if total_income:
        savings = round(total_income * 0.15, 2)
    else:
        savings = round(total_expenses * 0.1, 2)

    for category, avg_value in avg_spending.items():
        budget[category] = {
            "limit": round(avg_value * 1.05, 2),  # небольшой запас
            "recommended": round(avg_value, 2)
        }

    budget["накопления"] = {"limit": savings, "recommended": savings}

    return budget


def compare_budget_vs_actual(budget: dict, actual_transactions: list) -> dict:
    """
    Сравнивает запланированные лимиты с фактическими расходами.
    Возвращает отчет по категориям.
    """

    # Считаем фактические расходы по категориям
    actual_spending = defaultdict(float)
    for t in actual_transactions:
        if t["amount"] < 0:
            actual_spending[t.get("category", "Без категории")] += abs(t["amount"])

    report = {}
    for category, data in budget.items():
        limit = data.get("limit", 0)
        actual = actual_spending.get(category, 0)
        diff = limit - actual
        status = "✅ В пределах бюджета" if diff >= 0 else "⚠️ Превышен бюджет"

        report[category] = {
            "limit": limit,
            "actual": actual,
            "difference": diff,
            "status": status
        }

    return report

def smart_piggy_bank(csv_file: str = "money.csv", json_file: str = None):
    print("=" * 70)
    print("💰 УМНАЯ КОПИЛКА — личный финансовый помощник 💡")
    print("=" * 70)

    # === 1. Импорт данных ===
    transactions = []
    if csv_file:
        transactions += import_financial_data(csv_file)
    if json_file:
        transactions += import_financial_data(json_file)

    if not transactions:
        print("❌ Нет данных для анализа.")
        return

    # === 2. Классификация ===
    categorized = categorize_all_transactions(transactions)

    # === 3. Аналитика ===
    stats = calculate_basic_stats(categorized)
    category_stats = calculate_by_category(categorized)
    timeline = analyze_by_time(categorized)

    # === 4. Планирование бюджета ===
    analysis = analyze_historical_spending(categorized)
    budget = create_budget_template(analysis, stats["total_income"])
    comparison = compare_budget_vs_actual(budget, categorized)

    # === 5. Отчет ===
    print("\n=== ФИНАНСОВЫЙ ОТЧЕТ ===")
    print(f"💰 Доходы: {stats['total_income']:.2f} руб.")
    print(f"💸 Расходы: {abs(stats['total_expense']):.2f} руб.")
    print(f"⚖️ Баланс: {stats['balance']:.2f} руб.")

    print("\n📊 Расходы по категориям:")
    for cat, data in category_stats.items():
        print(f"  {cat}: {abs(data['sum']):.2f} руб. ({data['percent']:.1f}%)")

    print("\n📅 Анализ по месяцам:")
    for month, data in timeline.items():
        print(f"  {month}: Доход {data['income']:.2f} | Расход {abs(data['expenses']):.2f}")
        if data["top_categories"]:
            top = ", ".join([f"{c} ({n})" for c, n in data["top_categories"]])
            print(f"   🔸 Топ категории: {top}")

    print("\n🎯 РЕКОМЕНДАЦИИ ПО БЮДЖЕТУ:")
    print("Топ категорий по расходам:")
    for cat, val in analysis["top_categories"]:
        print(f"  🔸 {cat}: {val:.2f} руб. в среднем")

    print("\n📋 СРАВНЕНИЕ С БЮДЖЕТОМ:")
    for cat, info in comparison.items():
        print(f"  {cat}: Потрачено {info['actual']:.2f} / Лимит {info['limit']:.2f} → {info['status']}")

    print("\n✅ Работа завершена успешно!\n")


if __name__ == "__main__":
    main()
