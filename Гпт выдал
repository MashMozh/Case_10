import csv
import json
import os.path
import collections
import datetime
import matplotlib.pyplot as plt

# =========================================================
# –†–û–õ–¨ 1 ‚Äî –ò–ú–ü–û–†–¢ –ò –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•
# =========================================================

def read_csv_file(filename: str) -> list:
    data = []
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                amount = float(row.get('amount', 0))
                transact_type = "–¥–æ—Ö–æ–¥" if amount >= 0 else "—Ä–∞—Å—Ö–æ–¥"
                data.append({
                    'date': row.get('date', '').strip(),
                    'amount': amount,
                    'description': row.get('description', '').strip(),
                    'type': transact_type
                })
        return data
    except FileNotFoundError:
        print("–û—à–∏–±–∫–∞: CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []

def read_json_file(filename: str) -> list:
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            content = json.load(file)
            transactions = content.get('transactions', [])
            unified = []
            for t in transactions:
                amount = float(t.get('amount', 0))
                transact_type = "–¥–æ—Ö–æ–¥" if amount >= 0 else "—Ä–∞—Å—Ö–æ–¥"
                unified.append({
                    'date': t.get('date', '').strip(),
                    'amount': amount,
                    'description': t.get('description', '').strip(),
                    'type': transact_type
                })
            return unified
    except FileNotFoundError:
        print("–û—à–∏–±–∫–∞: JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON.")
        return []

def import_financial_data(filename: str) -> list:
    if not os.path.exists(filename):
        print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return []
    ext = os.path.splitext(filename)[1].lower()
    if ext == '.csv':
        return read_csv_file(filename)
    elif ext == '.json':
        return read_json_file(filename)
    else:
        print("–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        return []

# =========================================================
# –†–û–õ–¨ 2 ‚Äî –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø
# =========================================================

categories = {
    "–ø—Ä–æ–¥—É–∫—Ç—ã": ["–ø—Ä–æ–¥—É–∫—Ç—ã", "–º–∞–≥–∞–∑–∏–Ω", "–ø—è—Ç—ë—Ä–æ—á–∫–∞"],
    "–æ–±–µ–¥ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã": ["—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–∫–∞—Ñ–µ", "–æ–±–µ–¥", "—É–∂–∏–Ω"],
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["—Ç–∞–∫—Å–∏", "–º–µ—Ç—Ä–æ", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"],
    "—É—Å–ª—É–≥–∏": ["–º–æ–±–∏–ª—å–Ω—ã–π", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Ä–µ–º–æ–Ω—Ç"],
    "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "–∏–≥—Ä—ã", "—Ç–µ–∞—Ç—Ä"],
    "–æ–¥–µ–∂–¥–∞": ["–æ–¥–µ–∂–¥–∞", "–æ–±—É–≤—å"],
    "–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ": ["–∞–ø—Ç–µ–∫–∞", "–≤—Ä–∞—á", "–º–µ–¥–∏—Ü–∏–Ω–∞"],
    "—Å–ø–æ—Ä—Ç": ["—Å–ø–æ—Ä—Ç", "—Ñ–∏—Ç–Ω–µ—Å"],
    "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": ["–∫—É—Ä—Å", "—à–∫–æ–ª–∞", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"],
    "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏": ["–∫–æ–º–º—É–Ω–∞–ª–∫–∞", "–≥–∞–∑", "–≤–æ–¥–∞"],
    "–∑–∞—Ä–ø–ª–∞—Ç–∞ –∏ –¥–æ—Ö–æ–¥—ã": ["–∑–∞—Ä–ø–ª–∞—Ç–∞", "–¥–æ—Ö–æ–¥", "–ø–µ—Ä–µ–≤–æ–¥"],
    "–ø–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞": ["–∫—Ä–µ–¥–∏—Ç", "–∏–ø–æ—Ç–µ–∫–∞"],
}

categories_priority = list(categories.keys())

def categorize_transaction_with_multiple(description: str) -> str:
    desc = description.lower()
    for category, keywords in categories.items():
        if any(k in desc for k in keywords):
            return category
    return "–¥—Ä—É–≥–æ–µ"

def categorize_all_transactions(transactions: list) -> list:
    for t in transactions:
        t["category"] = categorize_transaction_with_multiple(t.get("description", ""))
    return transactions

# =========================================================
# –†–û–õ–¨ 3 ‚Äî –ê–ù–ê–õ–ò–¢–ò–ö–ê
# =========================================================

def calculate_basic_stats(transactions: list) -> dict:
    total_income = sum(t['amount'] for t in transactions if t['amount'] > 0)
    total_expense = sum(t['amount'] for t in transactions if t['amount'] < 0)
    return {
        'total_income': total_income,
        'total_expense': total_expense,
        'balance': total_income + total_expense,
        'transaction_count': len(transactions)
    }

def calculate_by_category(transactions: list) -> dict:
    category_totals = {}
    total_expense = sum(t['amount'] for t in transactions if t['amount'] < 0)
    for t in transactions:
        cat = t.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        if cat not in category_totals:
            category_totals[cat] = {'sum': 0, 'count': 0}
        category_totals[cat]['sum'] += t['amount']
        category_totals[cat]['count'] += 1
    for cat, data in category_totals.items():
        data['percent'] = (-data['sum'] / -total_expense * 100) if total_expense != 0 else 0
    return category_totals

def analyze_by_time(transactions: list) -> dict:
    monthly = {}
    for t in transactions:
        date_obj = datetime.datetime.strptime(t['date'], '%Y-%m-%d')
        month = date_obj.strftime('%Y-%m')
        if month not in monthly:
            monthly[month] = {'income': 0, 'expense': 0, 'categories': []}
        if t['amount'] > 0:
            monthly[month]['income'] += t['amount']
        else:
            monthly[month]['expense'] += t['amount']
            monthly[month]['categories'].append(t.get('category', ''))
    for m, data in monthly.items():
        counter = collections.Counter(data['categories'])
        data['top_categories'] = counter.most_common(3)
    return monthly

# =========================================================
# –†–û–õ–¨ 4 ‚Äî –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï, –°–û–í–ï–¢–´ –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø
# =========================================================

def analyze_historical_spending(transactions: list) -> dict:
    total_expense = -sum(t['amount'] for t in transactions if t['amount'] < 0)
    eating_out = -sum(t['amount'] for t in transactions if t['category'] == "–æ–±–µ–¥ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã")
    savings_rate = (sum(t['amount'] for t in transactions if t['amount'] > 0) + sum(t['amount'] for t in transactions if t['amount'] < 0)) / sum(t['amount'] for t in transactions if t['amount'] > 0)
    return {
        "eating_out_ratio": eating_out / total_expense if total_expense else 0,
        "savings_rate": savings_rate
    }

def create_budget_template(analysis: dict, total_income: float) -> dict:
    needs = total_income * 0.5
    wants = total_income * 0.3
    savings = total_income * 0.2
    return {
        "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ": needs,
        "–∂–µ–ª–∞–Ω–∏—è": wants,
        "—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è": savings
    }

def compare_budget_vs_actual(budget: dict, transactions: list) -> dict:
    actual_expenses = -sum(t['amount'] for t in transactions if t['amount'] < 0)
    planned = sum(budget.values())
    return {
        "budget_report": {
            "–ø–ª–∞–Ω": planned,
            "—Ñ–∞–∫—Ç": actual_expenses,
            "—Ä–∞–∑–Ω–∏—Ü–∞": planned - actual_expenses
        }
    }

def simulate_financial_decisions(budget: dict, scenarios: list) -> dict:
    results = {}
    for s in scenarios:
        new_budget = budget.copy()
        for k, v in s["impact"].items():
            new_budget[k] = new_budget.get(k, 0) + v
        results[s["action"]] = new_budget
    return results

def track_financial_goals(budget: dict, goals: list) -> dict:
    result = {}
    for g in goals:
        progress = g["current"] / g["target"]
        status = "–ø–æ –ø–ª–∞–Ω—É" if progress >= 0.4 else "–æ—Ç—Å—Ç–∞—ë—Ç–µ"
        result[g["name"]] = f"{g['current']}/{g['target']} —Ä—É–±. ({progress*100:.0f}%) ‚Äî {status}"
    return result

def generate_personalized_advice(analysis: dict, user_profile: dict) -> list:
    advice = []
    if analysis["eating_out_ratio"] > 0.3:
        advice.append("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –µ–¥—É –≤–Ω–µ –¥–æ–º–∞ ‚Äî —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –Ω–∞ 20%.")
    if analysis["savings_rate"] < 0.1:
        advice.append("–û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã 10% –¥–æ—Ö–æ–¥–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ.")
    advice.append("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–∞ –æ—Ç–ø—É—Å–∫.")
    return advice

def optimize_budget_allocation(budget: dict, goals: list) -> dict:
    optimized = budget.copy()
    if any(g['target'] > 50000 for g in goals):
        optimized["—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è"] += optimized["–∂–µ–ª–∞–Ω–∏—è"] * 0.1
        optimized["–∂–µ–ª–∞–Ω–∏—è"] *= 0.9
    return optimized

def visualize_budget(report: dict):
    labels = list(report.keys())
    values = list(report.values())
    plt.bar(labels, values)
    plt.title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ (–ø–ª–∞–Ω/—Ñ–∞–∫—Ç)")
    plt.ylabel("‚ÇΩ")
    plt.show()

# =========================================================
# –°–ë–û–† –í–°–ï–ì–û –í –û–î–ò–ù –ü–†–û–¶–ï–°–°
# =========================================================

def print_comprehensive_report(stats, category_stats, comparison, goals, advice, optimized, simulation):
    print("\nüéØ –î–û–°–¢–ò–ñ–ï–ù–ò–ï –¶–ï–õ–ï–ô:")
    for name, status in goals.items():
        print(f"‚Ä¢ {name}: {status}")
    print("\nüí° –°–û–í–ï–¢–´:")
    for a in advice:
        print(f"- {a}")
    print("\nüìà –°–ò–ú–£–õ–Ø–¶–ò–ò:")
    for s, res in simulation.items():
        print(f"{s}: {res}")
    print("\nüí∞ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç:")
    for k, v in optimized.items():
        print(f"{k}: {v:.2f} —Ä—É–±.")

# =========================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =========================================================

def main_enhanced():
    transactions = import_financial_data("money.csv")
    transactions = categorize_all_transactions(transactions)

    stats = calculate_basic_stats(transactions)
    category_stats = calculate_by_category(transactions)

    analysis = analyze_historical_spending(transactions)
    budget = create_budget_template(analysis, total_income=stats["total_income"])
    comparison = compare_budget_vs_actual(budget, transactions)

    goals = [
        {"name": "–æ—Ç–ø—É—Å–∫", "target": 100000, "current": 45000, "deadline": "2025-07-01"},
        {"name": "–Ω–æ–≤—ã–π –Ω–æ—É—Ç–±—É–∫", "target": 80000, "current": 15000, "deadline": "2025-03-01"}
    ]
    user_profile = {"income": stats["total_income"], "age": 29, "risk": "—É–º–µ—Ä–µ–Ω–Ω—ã–π"}

    goals_progress = track_financial_goals(budget, goals)
    advice = generate_personalized_advice(analysis, user_profile)
    optimized = optimize_budget_allocation(budget, goals)
    scenarios = [
        {"action": "–∫—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É", "impact": {"—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": 15000, "—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è": -500000}},
        {"action": "—Å–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É", "impact": {"–¥–æ—Ö–æ–¥": 20000}},
        {"action": "–≤–∑—è—Ç—å –∏–ø–æ—Ç–µ–∫—É", "impact": {"–∂–∏–ª—å—ë": 25000, "—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è": -2000000}}
    ]
    simulation = simulate_financial_decisions(budget, scenarios)

    visualize_budget(comparison["budget_report"])
    print_comprehensive_report(stats, category_stats, comparison, goals_progress, advice, optimized, simulation)

# =========================================================
# –ó–ê–ü–£–°–ö
# =========================================================

if __name__ == "__main__":
    main_enhanced()
